// Code generated by gotestmd DO NOT EDIT.
package highload

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
	"github.com/networkservicemesh/integration-tests/suites/basic"
)

type Suite struct {
	base.Suite
	basicSuite basic.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite, &s.basicSuite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
}
func (s *Suite) TestNsc_nse_scaling() {
	r := s.Runner("../deployments-k8s/examples/highload/nsc-nse-scaling")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-nsc-nse-scaling` + "\n" + `kubectl delete -f https://raw.githubusercontent.com/networkservicemesh/deployments-k8s/4b42afefaf090a724f79767ed6b3f2d61643a726/examples/highload/nsc-nse-scaling/metrics-server.yaml`)
	})
	r.Run(`kubectl apply -f https://raw.githubusercontent.com/networkservicemesh/deployments-k8s/4b42afefaf090a724f79767ed6b3f2d61643a726/examples/highload/nsc-nse-scaling/metrics-server.yaml`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l k8s-app=metrics-server -n kube-system`)
	r.Run(`mkdir -p $ARTIFACTS_DIR/highload/nsc-nse-scaling` + "\n" + `kubectl top pod -A > $ARTIFACTS_DIR/highload/nsc-nse-scaling/metrics-before`)
	r.Run(`kubectl apply -k https://github.com/networkservicemesh/deployments-k8s/examples/highload/nsc-nse-scaling?ref=4b42afefaf090a724f79767ed6b3f2d61643a726`)
	r.Run(`function ping() {` + "\n" + `    nscs=$(kubectl get pods -l app=nsc-kernel -o go-template --template="{{range .items}}{{.metadata.name}} {{end}}" -n ns-nsc-nse-scaling)` + "\n" + `    for nsc in $nscs; do` + "\n" + `        ipv4=$(kubectl exec $nsc -n ns-nsc-nse-scaling -- ip route | grep -Eo '172\.16\.0\.[0-9]{1,3}')` + "\n" + `        kubectl exec $nsc -n ns-nsc-nse-scaling -- ping -c2 -i0.5 $ipv4 || return 1` + "\n" + `    done` + "\n" + `    return 0` + "\n" + `}`)
	r.Run(`SCALING_COUNT=100`)
	r.Run(`function scaling() {` + "\n" + `    for i in $(seq 1 $SCALING_COUNT); do` + "\n" + `        kubectl scale deployment -n ns-nsc-nse-scaling nsc-kernel --replicas=10` + "\n" + `        kubectl scale deployment -n ns-nsc-nse-scaling nse-kernel --replicas=10` + "\n" + `        sleep 60` + "\n" + `` + "\n" + `        ping || return 1` + "\n" + `` + "\n" + `        kubectl scale deployment -n ns-nsc-nse-scaling nsc-kernel --replicas=0` + "\n" + `        kubectl scale deployment -n ns-nsc-nse-scaling nse-kernel --replicas=0` + "\n" + `        sleep 60` + "\n" + `    done` + "\n" + `    return 0` + "\n" + `}`)
	r.Run(`scaling`)
	r.Run(`kubectl top pod -A > $ARTIFACTS_DIR/highload/nsc-nse-scaling/metrics-after`)
	r.Run(`fwds=$(kubectl get pods -l app=forwarder-vpp -n nsm-system --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')` + "\n" + `for fwd in $fwds; do` + "\n" + `    kubectl exec -n nsm-system $fwd -- vppctl show int > $ARTIFACTS_DIR/highload/nsc-nse-scaling/$fwd-ifaces` + "\n" + `done`)
}
