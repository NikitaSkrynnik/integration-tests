// Code generated by gotestmd DO NOT EDIT.
package features_ovs

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
	"github.com/networkservicemesh/integration-tests/suites/features/dns"
	"github.com/networkservicemesh/integration-tests/suites/features/exclude_prefixes"
	"github.com/networkservicemesh/integration-tests/suites/features/exclude_prefixes_client"
	"github.com/networkservicemesh/integration-tests/suites/features/mutually_aware_nses"
	"github.com/networkservicemesh/integration-tests/suites/features/policy_based_routing"
	"github.com/networkservicemesh/integration-tests/suites/features/select_forwarder"
	"github.com/networkservicemesh/integration-tests/suites/ovs"
)

type Suite struct {
	base.Suite
	ovsSuite                     ovs.Suite
	dnsSuite                     dns.Suite
	exclude_prefixesSuite        exclude_prefixes.Suite
	exclude_prefixes_clientSuite exclude_prefixes_client.Suite
	select_forwarderSuite        select_forwarder.Suite
	policy_based_routingSuite    policy_based_routing.Suite
	mutually_aware_nsesSuite     mutually_aware_nses.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite, &s.ovsSuite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
	s.RunIncludedSuites()
}
func (s *Suite) RunIncludedSuites() {
	s.Run("Dns", func() {
		suite.Run(s.T(), &s.dnsSuite)
	})
	s.Run("Exclude_prefixes", func() {
		suite.Run(s.T(), &s.exclude_prefixesSuite)
	})
	s.Run("Exclude_prefixes_client", func() {
		suite.Run(s.T(), &s.exclude_prefixes_clientSuite)
	})
	s.Run("Mutually_aware_nses", func() {
		suite.Run(s.T(), &s.mutually_aware_nsesSuite)
	})
	s.Run("Policy_based_routing", func() {
		suite.Run(s.T(), &s.policy_based_routingSuite)
	})
	s.Run("Select_forwarder", func() {
		suite.Run(s.T(), &s.select_forwarderSuite)
	})
}
func (s *Suite) TestAnnotated_namespace() {
	r := s.Runner("../deployments-k8s/examples/features/annotated-namespace")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-annotated-namespace`)
	})
	r.Run(`kubectl apply -k ../../../examples/features/annotated-namespace`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel -n ns-annotated-namespace`)
	r.Run(`kubectl annotate ns ns-annotated-namespace networkservicemesh.io=kernel://annotated-namespace/nsm-1`)
	r.Run(`kubectl apply -f ../../../examples/features/annotated-namespace/client.yaml`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=alpine -n ns-annotated-namespace`)
	r.Run(`kubectl exec deployments/alpine -n ns-annotated-namespace -- ping -c 4 172.16.1.100`)
	r.Run(`kubectl exec deployments/nse-kernel -n ns-annotated-namespace -- ping -c 4 172.16.1.101`)
}
func (s *Suite) TestChange_nse_dynamically() {
	r := s.Runner("../deployments-k8s/examples/features/change-nse-dynamically")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-change-nse-dynamically`)
	})
	r.Run(`kubectl apply -k ../../../examples/features/change-nse-dynamically`)
	r.Run(`kubectl apply -f ../../../examples/features/change-nse-dynamically/blue-netsvc.yaml`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=alpine -n ns-change-nse-dynamically`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=blue-nse -n ns-change-nse-dynamically`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=green-nse -n ns-change-nse-dynamically`)
	r.Run(`kubectl exec pods/alpine -n ns-change-nse-dynamically -- ping -c 4 172.16.2.100`)
	r.Run(`kubectl exec pods/blue-nse -n ns-change-nse-dynamically -- ping -c 4 172.16.2.101`)
	r.Run(`kubectl apply -f ../../../examples/features/change-nse-dynamically/green-netsvc.yaml`)
	r.Run(`kubectl exec pods/alpine -n ns-change-nse-dynamically -- ping -c 4 172.16.1.100`)
	r.Run(`kubectl exec pods/green-nse -n ns-change-nse-dynamically -- ping -c 4 172.16.1.101`)
	r.Run(`kubectl apply -f ../../../examples/features/change-nse-dynamically/blue-netsvc.yaml`)
	r.Run(`kubectl exec pods/alpine -n ns-change-nse-dynamically -- ping -c 4 172.16.2.100`)
	r.Run(`kubectl exec pods/blue-nse -n ns-change-nse-dynamically -- ping -c 4 172.16.2.101`)
}
func (s *Suite) TestKernel2IP2Kernel_dual_stack() {
	r := s.Runner("../deployments-k8s/examples/features/dual-stack/Kernel2IP2Kernel_dual_stack")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-kernel2ip2kernel-dual-stack`)
	})
	r.Run(`kubectl apply -k ../../../../examples/features/dual-stack/Kernel2IP2Kernel_dual_stack`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=alpine -n ns-kernel2ip2kernel-dual-stack`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel -n ns-kernel2ip2kernel-dual-stack`)
	r.Run(`kubectl exec pods/alpine -n ns-kernel2ip2kernel-dual-stack -- ping -c 4 2001:db8::`)
	r.Run(`kubectl exec deployments/nse-kernel -n ns-kernel2ip2kernel-dual-stack -- ping -c 4 2001:db8::1`)
	r.Run(`kubectl exec pods/alpine -n ns-kernel2ip2kernel-dual-stack -- ping -c 4 172.16.1.100`)
	r.Run(`kubectl exec deployments/nse-kernel -n ns-kernel2ip2kernel-dual-stack -- ping -c 4 172.16.1.101`)
}
func (s *Suite) TestKernel2Kernel_dual_stack() {
	r := s.Runner("../deployments-k8s/examples/features/dual-stack/Kernel2Kernel_dual_stack")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-kernel2kernel-dual-stack`)
	})
	r.Run(`kubectl apply -k ../../../../examples/features/dual-stack/Kernel2Kernel_dual_stack`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=alpine -n ns-kernel2kernel-dual-stack`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel -n ns-kernel2kernel-dual-stack`)
	r.Run(`kubectl exec pods/alpine -n ns-kernel2kernel-dual-stack -- ping -c 4 2001:db8::`)
	r.Run(`kubectl exec deployments/nse-kernel -n ns-kernel2kernel-dual-stack -- ping -c 4 2001:db8::1`)
	r.Run(`kubectl exec pods/alpine -n ns-kernel2kernel-dual-stack -- ping -c 4 172.16.1.100`)
	r.Run(`kubectl exec deployments/nse-kernel -n ns-kernel2kernel-dual-stack -- ping -c 4 172.16.1.101`)
}
func (s *Suite) TestKernel2IP2Kernel_ipv6() {
	r := s.Runner("../deployments-k8s/examples/features/ipv6/Kernel2IP2Kernel_ipv6")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-kernel2ip2kernel-ipv6`)
	})
	r.Run(`kubectl apply -k ../../../../examples/features/ipv6/Kernel2IP2Kernel_ipv6`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=alpine -n ns-kernel2ip2kernel-ipv6`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel -n ns-kernel2ip2kernel-ipv6`)
	r.Run(`kubectl exec pods/alpine -n ns-kernel2ip2kernel-ipv6 -- ping -c 4 2001:db8::`)
	r.Run(`kubectl exec deployments/nse-kernel -n ns-kernel2ip2kernel-ipv6 -- ping -c 4 2001:db8::1`)
}
func (s *Suite) TestKernel2Kernel_ipv6() {
	r := s.Runner("../deployments-k8s/examples/features/ipv6/Kernel2Kernel_ipv6")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-kernel2kernel-ipv6`)
	})
	r.Run(`kubectl apply -k ../../../../examples/features/ipv6/Kernel2Kernel_ipv6`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=alpine -n ns-kernel2kernel-ipv6`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel -n ns-kernel2kernel-ipv6`)
	r.Run(`kubectl exec pods/alpine -n ns-kernel2kernel-ipv6 -- ping -c 4 2001:db8::`)
	r.Run(`kubectl exec deployments/nse-kernel -n ns-kernel2kernel-ipv6 -- ping -c 4 2001:db8::1`)
}
func (s *Suite) TestMultiple_services() {
	r := s.Runner("../deployments-k8s/examples/features/multiple-services")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-multiple-services`)
	})
	r.Run(`kubectl apply -k ../../../examples/features/multiple-services`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=alpine -n ns-multiple-services`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel-1 -n ns-multiple-services`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel-2 -n ns-multiple-services`)
	r.Run(`kubectl exec pods/alpine -n ns-multiple-services -- ping -c 4 172.16.1.100`)
	r.Run(`kubectl exec pods/nse-kernel-1 -n ns-multiple-services -- ping -c 4 172.16.1.101`)
	r.Run(`kubectl exec pods/alpine -n ns-multiple-services -- ping -c 4 172.16.2.100`)
	r.Run(`kubectl exec pods/nse-kernel-2 -n ns-multiple-services -- ping -c 4 172.16.2.101`)
}
func (s *Suite) TestOpa() {
	r := s.Runner("../deployments-k8s/examples/features/opa")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-opa`)
	})
	r.Run(`kubectl apply -k ../../../examples/features/opa`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nsc-kernel -n ns-opa`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel -n ns-opa`)
	r.Run(`kubectl logs deployments/nsc-kernel -n ns-opa | grep "PermissionDenied desc = no sufficient privileges"`)
}
func (s *Suite) TestScale_from_zero() {
	r := s.Runner("../deployments-k8s/examples/features/scale-from-zero")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-scale-from-zero`)
	})
	r.Run(`kubectl apply -k ../../../examples/features/scale-from-zero`)
	r.Run(`kubectl wait -n ns-scale-from-zero --for=condition=ready --timeout=1m pod -l app=nse-supplier-k8s`)
	r.Run(`kubectl wait -n ns-scale-from-zero --for=condition=ready --timeout=1m pod -l app=alpine`)
	r.Run(`kubectl wait -n ns-scale-from-zero --for=condition=ready --timeout=1m pod -l app=nse-icmp-responder`)
	r.Run(`NSE=$(kubectl get pod -n ns-scale-from-zero --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' -l app=nse-icmp-responder)`)
	r.Run(`kubectl exec pods/alpine -n ns-scale-from-zero -- ping -c 4 169.254.0.0`)
	r.Run(`kubectl exec $NSE -n ns-scale-from-zero -- ping -c 4 169.254.0.1`)
	r.Run(`NSE_NODE=$(kubectl get pod -n ns-scale-from-zero --template '{{range .items}}{{.spec.nodeName}}{{"\n"}}{{end}}' -l app=nse-icmp-responder)` + "\n" + `NSC_NODE=$(kubectl get pod -n ns-scale-from-zero --template '{{range .items}}{{.spec.nodeName}}{{"\n"}}{{end}}' -l app=alpine)`)
	r.Run(`if [ $NSC_NODE == $NSE_NODE ]; then echo "OK"; else echo "different nodes"; false; fi`)
	r.Run(`kubectl delete pod -n ns-scale-from-zero alpine`)
	r.Run(`kubectl wait -n ns-scale-from-zero --for=delete --timeout=1m pod -l app=nse-icmp-responder`)
}
func (s *Suite) TestScaled_registry() {
	r := s.Runner("../deployments-k8s/examples/features/scaled-registry")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-scaled-registry`)
		r.Run(`kubectl scale --replicas=1 deployments/registry-k8s -n nsm-system`)
	})
	r.Run(`kubectl apply -k ../../../examples/features/scaled-registry`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nse-kernel -n ns-scaled-registry`)
	r.Run(`NSE=$(kubectl get pod -n ns-scaled-registry --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' -l app=nse-kernel)`)
	r.Run(`kubectl get nses -A | grep $NSE`)
	r.Run(`kubectl scale --replicas=0 deployments/registry-k8s -n nsm-system`)
	r.Run(`kubectl wait --for=delete --timeout=1m pod -l app=registry -n nsm-system`)
	r.Run(`kubectl get nses -A | grep $NSE`)
	r.Run(`kubectl scale --replicas=2 deployments/registry-k8s -n nsm-system`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=registry -n nsm-system`)
	r.Run(`kubectl scale --replicas=0 deployments/nse-kernel -n ns-scaled-registry`)
	r.Run(`kubectl get nses -A | grep $NSE` + "\n" + `if [[ "$?" == "1" ]]; then echo OK; else echo "nse entry still exists"; false; fi`)
}
func (s *Suite) TestWebhook() {
	r := s.Runner("../deployments-k8s/examples/features/webhook")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-webhook`)
	})
	r.Run(`kubectl apply -k ../../../examples/features/webhook`)
	r.Run(`kubectl wait --for=condition=ready --timeout=5m pod -l app=nse-kernel -n ns-webhook`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod -l app=nettools -n ns-webhook`)
	r.Run(`kubectl exec pods/nettools -n ns-webhook -- curl 172.16.1.100:80 | grep -o "<title>Welcome to nginx!</title>"`)
}
func (s *Suite) TestWebhook_smartvf() {
	r := s.Runner("../deployments-k8s/examples/features/webhook-smartvf")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ns-webhook-smartvf`)
	})
	r.Run(`WH=$(kubectl get pods -l app=admission-webhook-k8s -n nsm-system --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')` + "\n" + `kubectl wait --for=condition=ready --timeout=1m pod ${WH} -n nsm-system`)
	r.Run(`kubectl apply -k ../../../examples/features/webhook-smartvf`)
	r.Run(`kubectl wait --for=condition=ready --timeout=5m pod -l app=nse-kernel -n ns-webhook-smartvf`)
	r.Run(`kubectl wait --for=condition=ready --timeout=1m pod postgres-cl -n ns-webhook-smartvf`)
	r.Run(`kubectl exec pods/postgres-cl -n ns-webhook-smartvf -c postgres-cl -- sh -c 'PGPASSWORD=admin psql -h 172.16.1.100 -p 5432 -U admin test'`)
}
