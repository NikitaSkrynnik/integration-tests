// Code generated by gotestmd DO NOT EDIT.
package interdomain

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
	"github.com/networkservicemesh/integration-tests/suites/interdomain/dns"
	"github.com/networkservicemesh/integration-tests/suites/interdomain/loadbalancer"
	"github.com/networkservicemesh/integration-tests/suites/interdomain/nsm"
	"github.com/networkservicemesh/integration-tests/suites/interdomain/spiffe_federation"
	"github.com/networkservicemesh/integration-tests/suites/spire/cluster1"
	"github.com/networkservicemesh/integration-tests/suites/spire/cluster2"
)

type Suite struct {
	base.Suite
	loadbalancerSuite      loadbalancer.Suite
	dnsSuite               dns.Suite
	cluster1Suite          cluster1.Suite
	cluster2Suite          cluster2.Suite
	spiffe_federationSuite spiffe_federation.Suite
	nsmSuite               nsm.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite, &s.loadbalancerSuite, &s.dnsSuite, &s.cluster1Suite, &s.cluster2Suite, &s.spiffe_federationSuite, &s.nsmSuite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
}
func (s *Suite) TestNsm_linkerd() {
	r := s.Runner("../deployments-k8s/examples/interdomain/nsm_linkerd")
	s.T().Cleanup(func() {
		r.Run(`export KUBECONFIG=$KUBECONFIG2` + "\n" + `kubectl delete deployment greeting` + "\n" + `kubectl delete ns ns-nsm-linkerd` + "\n" + `linkerd uninstall | kubectl delete -f -` + "\n" + `kubectl --kubeconfig=$KUBECONFIG1 delete deployment alpine`)
	})
	r.Run(`curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh -` + "\n" + `export PATH=$PATH:$HOME/.linkerd2/bin` + "\n" + `` + "\n" + `export KUBECONFIG=$KUBECONFIG2` + "\n" + `linkerd check --pre` + "\n" + `linkerd install --crds | kubectl apply -f -` + "\n" + `linkerd install | kubectl apply -f -` + "\n" + `linkerd check`)
	r.Run(`kubectl create ns ns-nsm-linkerd` + "\n" + `kubectl --kubeconfig=$KUBECONFIG2 apply -f https://raw.githubusercontent.com/networkservicemesh/deployments-k8s/f86bd634707a2aa7e59b06dedff8fac0e57b161f/examples/interdomain/nsm_linkerd/networkservice.yaml`)
	r.Run(`kubectl --kubeconfig=$KUBECONFIG1 apply -f https://raw.githubusercontent.com/networkservicemesh/deployments-k8s/f86bd634707a2aa7e59b06dedff8fac0e57b161f/examples/interdomain/nsm_linkerd/greeting/client.yaml`)
	r.Run(`kubectl --kubeconfig=$KUBECONFIG2 apply -k https://github.com/networkservicemesh/deployments-k8s/examples/interdomain/nsm_linkerd/nse-auto-scale?ref=f86bd634707a2aa7e59b06dedff8fac0e57b161f`)
	r.Run(`kubectl --kubeconfig=$KUBECONFIG2 apply -f https://raw.githubusercontent.com/networkservicemesh/deployments-k8s/f86bd634707a2aa7e59b06dedff8fac0e57b161f/examples/interdomain/nsm_linkerd/greeting/server.yaml` + "\n" + `kubectl --kubeconfig=$KUBECONFIG2 wait --timeout=2m --for=condition=ready pod -l app=greeting` + "\n" + `kubectl get deploy greeting -o yaml | linkerd inject - | kubectl apply -f -`)
	r.Run(`kubectl --kubeconfig=$KUBECONFIG1 wait --timeout=2m --for=condition=ready pod -l app=alpine`)
	r.Run(`kubectl --kubeconfig=$KUBECONFIG1 exec deploy/alpine -c alpine -- ip ro add 10.96.0.10 via 10.244.1.1`)
	r.Run(`kubectl --kubeconfig=$KUBECONFIG1 exec deploy/alpine -c cmd-nsc -- apk add curl`)
	r.Run(`kubectl --kubeconfig=$KUBECONFIG1 exec deploy/alpine -c cmd-nsc -- curl -s greeting.default:9080 | grep -o "hello world from linkerd"`)
}
